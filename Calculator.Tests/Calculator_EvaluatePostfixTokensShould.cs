using System;
using System.Collections.Generic;
using NUnit.Framework;

namespace Calculator.Tests
{
    public class Calculator_EvaluatePostfixTokensShould
    {
        [TestCase("2-2", 0)]
        [TestCase("2+2", 4)]
        [TestCase("2/2", 1)]
        [TestCase("3mod2", 1)]
        [TestCase("7mod2mod5", 1)]
        [TestCase("2modulo2", 0)]
        [TestCase("5%0", 0)]
        [TestCase("5%-0", 0)]
        [TestCase("3%7%2", 1)]
        [TestCase("2%3", 2)]
        [TestCase("3%2", 1)]
        [TestCase("-3%2", 1)]
        [TestCase("-2%3", 1)]
        [TestCase("0.02%3", 0.02)]
        [TestCase("3%0.02", 0)]
        [TestCase("-0.02%3", 2.98)]
        [TestCase("-3%0.02", 0)]
        [TestCase("-4.%-2.", 0)]
        [TestCase("02.0%3", 2)]
        [TestCase("3%02.0", 1)]
        [TestCase("-02.0%3", 1)]
        [TestCase("-3%02.0", 1)]
        [TestCase("-0.3%-0.0002", 0)]
        [TestCase("-0.3%-0.002", 0)]
        [TestCase("-0.3%0.0002", 0)]
        [TestCase("0.3%-0.0002", 0)]
        [TestCase("-0.0002%-0.3", -0.0002)]
        [TestCase("-0.002%-0.3", -0.002)]
        [TestCase("-0.02%-0.3", -0.02)]
        [TestCase("0.02%0.03", 0.02)]
        [TestCase("-0.02%-0.02", 0)]
        [TestCase("0.03%0.02", 0.0099999999999999985d)]
        [TestCase("-0.03%0.02", 0.010000000000000002d)]
        [TestCase("0.03%-0.02", -0.010000000000000002d)]
        [TestCase("-0.02%-0.03", -0.02)]
        [TestCase("-0.03%-0.02", -0.0099999999999999985d)]
        [TestCase("2%%-15", -14.98)]
        [TestCase("-2.%%.2%2", 0.18000000000000002d)]
        [TestCase("-2.%%-.2%2", 1.98)]
        [TestCase("3%.2%", 0)]
        [TestCase("2%.3%", 0.0020000000000000018d)]
        [TestCase("2.-2", 0)]
        [TestCase("2*2", 4)]
        [TestCase("3*2*4", 24)]
        [TestCase("2**2", 4)]
        [TestCase("4**6**3", 1.1090678776483259E+130d)]
        [TestCase("2^3", 8)]
        [TestCase("4^6^3", 1.1090678776483259E+130d)]
        [TestCase("3^4^6", Double.PositiveInfinity)]
        [TestCase("4+8*3", 28)]
        [TestCase("(4+8)*3", 36)]
        [TestCase("6/2(1+2)", 9)]
        [TestCase("8/2(2+2)", 16)]
        [TestCase("6+9+4^2", 31)]
        [TestCase("5*(6^2-2)", 170)]
        [TestCase("5.+(-2%^8)", 5.0000000000000258d)]
        [TestCase("5.+-2%^8", 5.0000000000000258d)]
        [TestCase("4*8^2+11", 267)]
        [TestCase("46+(8*4)/2", 62)]
        [TestCase("6+9+(4*2+4^2)", 39)]
        [TestCase("7^2*(25+10/5)-13", 1310)]
        [TestCase("10-7*(3+2)+7^2", 24)]
        [TestCase("5-3*(2^3-5+7*(-3))", 59)]
        [TestCase("2*(1+(4*(2+1)+3))", 32)]
        [TestCase("(3*5^2/15)-(5-2^2)", 4)]
        [TestCase("((3+2)^2+3)-9+3^2", 28)]
        [TestCase("(18/3)^2+((13+7)*5^2)", 536)]
        [TestCase("78+(30-0.5(28+8))/6", 80)]
        [TestCase("(5.9-5.3)*7.2+1.4^2", 6.2800000000000038d)]
        [TestCase("(2.1^2+5.2-7.2)*7.1", 17.110999999999994d)]
        [TestCase("2*20/2+(3+4)*3^2-6+15", 92)]
        public void EvaluatePostfixTokens_InfixExpressions_ReturnsExpectedResults(string infixExp, double expectedRes)
        => Assert.AreEqual(Program.EvaluatePostfixTokens(Program.InfixToPostfixTokens(Program.CreateInfixTokens(infixExp))), expectedRes);

        [TestCase(new string[] {"2", "2", "-"}, 0)]
        [TestCase(new string[] {"2", "2", "-", "2", "-"}, -2)]
        [TestCase(new string[] {"2", "2", "+"}, 4)]
        [TestCase(new string[] {"2", "2", "+", "2", "+"}, 6)]
        [TestCase(new string[] {"2", "2", "/"}, 1)]
        [TestCase(new string[] {"2", "2", "/", "2", "/"}, 0.5d)]
        [TestCase(new string[] {"2", "3", "/", "2", "/"}, 0.33333333333333331d)]
        [TestCase(new string[] {"2", "3", "/", "2", "/",  "3", "/"}, 0.1111111111111111d)]
        [TestCase(new string[] {"2", "2", "*"}, 4)]
        [TestCase(new string[] {"2", "2", "*", "2", "*"}, 8)]
        [TestCase(new string[] {"-0.0002", "-0.3", "%"}, -0.00020000000000000001d)]
        [TestCase(new string[] {"0.0002", "-0.3", "%"}, -0.29980000000000001d)]
        [TestCase(new string[] {"-0.3", "-0.0002", "%"}, 0)]
        [TestCase(new string[] {"2", "2", "%"}, 0)]
        [TestCase(new string[] {"2", "2", "%", "2", "%"}, 0)]
        [TestCase(new string[] {"2", "3", "%", "2", "%",  "3", "%"}, 0)]
        [TestCase(new string[] {"9", "2", "%", "3", "%",  "2", "%"}, 1)]
        [TestCase(new string[] {"2", "2", "mod"}, 0)]
        [TestCase(new string[] {"2", "2", "mod", "2", "mod"}, 0)]
        [TestCase(new string[] {"2", "3", "mod", "2", "mod",  "3", "mod"}, 0)]
        [TestCase(new string[] {"9", "2", "mod", "3", "mod",  "2", "mod"}, 1)]
        [TestCase(new string[] {"2", "2", "modulo"}, 0)]
        [TestCase(new string[] {"2", "2", "modulo", "2", "modulo"}, 0)]
        [TestCase(new string[] {"2", "3", "modulo", "2", "modulo",  "3", "modulo"}, 0)]
        [TestCase(new string[] {"9", "2", "modulo", "3", "modulo",  "2", "modulo"}, 1)]
        [TestCase(new string[] {"2", "2", "power"}, 4)]
        [TestCase(new string[] {"2", "3", "5", "pow", "power"}, 1.4134776518227075E+73d)]
        [TestCase(new string[] {"3", "4", "6", "power", "pow"}, Double.PositiveInfinity)]
        [TestCase(new string[] {"2", "3", "4", "6", "**", "^", "power"}, Double.PositiveInfinity)]
        [TestCase(new string[] {"2", "3", "4", "6", "3", "pow", "^", "power", "**"}, Double.PositiveInfinity)]
        [TestCase(new string[] {"2", "3", "4", "6", "3", "8", "9", "pow", "power", "^", "**", "pow", "**"}, Double.PositiveInfinity)]
        [TestCase(new string[] {"2", "2", "**"}, 4)]
        [TestCase(new string[] {"4", "125", "**"}, 1.8092513943330656e+75)]
        [TestCase(new string[] {"4", "0.125", "pow"}, 1.189207115002721d)]
        [TestCase(new string[] {"2", "3", "2", "power", "+"}, 11)]
        [TestCase(new string[] {"2", "4", "9", "^", "-", "2", "+"}, -262140)]
        [TestCase(new string[] {"-4", "-0.1", "pow"}, Double.NaN)]
        [TestCase(new string[] {"-2", "-3", "^"}, -0.125)]
        [TestCase(new string[] {"-2", "-3", "-4", "power", "^"}, Double.NaN)]
        [TestCase(new string[] {"-2", "-3", "-4", "-6", "^", "**", "pow"}, Double.NaN)]
        [TestCase(new string[] {"-2", "-3", "-4", "-6", "-3", "^", "power", "^", "power"}, Double.NaN)]
        [TestCase(new string[] {"-2", "-3", "-4", "-6", "-3", "^", "pow", "^", "**"}, Double.NaN)]
        [TestCase(new string[] {"-4", "-125", "**"}, -5.5271478752604446E-76d)]
        [TestCase(new string[] {"-4", "-0.125", "pow"}, Double.NaN)]
        [TestCase(new string[] {"-2", "-3", "-2", "power", "+"}, -1.8888888888888888d)]
        [TestCase(new string[] {"2", "4", "9", "^", "-", "2", "+"}, -262140)]
        [TestCase(new string[] {"4", "8", "3", "*", "+"}, 28)]
        [TestCase(new string[] {"4", "8", "+", "3", "*"}, 36)]
        [TestCase(new string[] {"6", "2", "/", "1", "2", "+", "*"}, 9)]
        [TestCase(new string[] {"8", "2", "/", "2", "2", "+", "*"}, 16)]
        [TestCase(new string[] {"6", "9", "+", "4", "2", "^", "+"}, 31)]
        [TestCase(new string[] {"5", "6", "2", "^", "2", "-", "*"}, 170)]
        [TestCase(new string[] {"4", "8", "2", "^", "*", "11", "+"}, 267)]
        [TestCase(new string[] {"46", "8", "4", "*", "2", "/", "+"}, 62)]
        [TestCase(new string[] {"6", "9", "+", "4", "2", "*", "4", "2", "^", "+", "+"}, 39)]
        [TestCase(new string[] {"7", "2", "^", "25", "10", "5", "/", "+", "*", "13", "-"}, 1310)]
        [TestCase(new string[] {"10", "7", "3", "2", "+", "*", "-", "7", "2", "^", "+"}, 24)]
        [TestCase(new string[] {"5", "3", "2", "3", "^", "5", "-", "7", "-3", "*", "+", "*", "-"}, 59)]
        [TestCase(new string[] {"2", "1", "4", "2", "1", "+", "*", "3", "+", "+", "*"}, 32)]
        [TestCase(new string[] {"3", "5", "2", "^", "*", "15", "/", "5", "2", "2", "^", "-", "-"}, 4)]
        [TestCase(new string[] {"3", "2", "+", "2", "^", "3", "+", "9", "-", "3", "2", "^", "+"}, 28)]
        [TestCase(new string[] {"18", "3", "/", "2", "^", "13", "7", "+", "5", "2", "^", "*", "+"}, 536)]
        [TestCase(new string[] {"78", "30", "0.5", "28", "8", "+", "*", "-", "6", "/", "+"}, 80)]
        [TestCase(new string[] {"5.9", "5.3", "-", "7.2", "*", "1.4", "2", "^", "+"}, 6.2800000000000038d)]
        [TestCase(new string[] {"2.1", "2", "^", "5.2", "+", "7.2", "-", "7.1", "*"}, 17.110999999999994d)]
        [TestCase(new string[] {"2", "20", "*", "2", "/", "3", "4", "+", "3", "2", "^", "*", "+", "6", "-", "15", "+"}, 92)]
        public void EvaluatePostfixTokens_ValidTokens_ReturnsExpectedResults(string[] validTokens, double expectedRes)
        => Assert.AreEqual(Program.EvaluatePostfixTokens(new Queue<string>(validTokens)), expectedRes);
        
        [TestCase(arg:new string[] {" "})]
        [TestCase(arg:new string[] {"      "})]
        [TestCase(arg:new string[] {" ", "  "})]
        [TestCase(arg:new string[] {"1.0."})]
        [TestCase(arg:new string[] {".1.0"})]
        [TestCase(arg:new string[] {"3..4"})]
        [TestCase(arg:new string[] {"-2..2"})]
        [TestCase(arg:new string[] {"-.2.2"})]
        [TestCase(arg:new string[] {"-2.", ".", "2"})]
        [TestCase(arg:new string[] {"."})]
        [TestCase(arg:new string[] {".", "  . ", ".", "asdad"})]
        [TestCase(arg:new string[] {"2", ".", "+"})]
        [TestCase(arg:new string[] {"2", "**", "3", "2", "**", "*"})]
        public void EvaluatePostfixTokens_InvalidTokens_ReturnsZero(string[] invalidTokens)
        => Assert.AreEqual(Program.EvaluatePostfixTokens(new Queue<string>(invalidTokens)), 0);
        
        [Test]
        public void EvaluatePostfixTokens_EmptyTokens_ReturnsZero()
        => Assert.AreEqual(Program.EvaluatePostfixTokens(new Queue<string>()), 0);
        
        [Test]
        public void EvaluatePostfixTokens_NullTokens_ReturnsZero()
        => Assert.AreEqual(Program.EvaluatePostfixTokens(null), 0);
    }
}